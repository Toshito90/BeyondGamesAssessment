//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace CoreSystems.InputSystem
{
    public partial class @InputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""d86be97d-e6e4-447d-920b-52a52644645a"",
            ""actions"": [
                {
                    ""name"": ""Camera ZoomIn"",
                    ""type"": ""Button"",
                    ""id"": ""9ccf5c88-f42c-4b62-82fc-68506b448d9b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Camera ZoomOut"",
                    ""type"": ""Button"",
                    ""id"": ""905e47fb-a0a4-4b6f-8f3e-2a5df26617be"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6d1dc7bf-b21f-4f4f-9c7b-6be39aadda4e"",
                    ""path"": ""<Keyboard>/numpadPlus"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera ZoomIn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cbc1e339-8fdc-4eb7-97fc-1a6ac9f4c6ca"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera ZoomIn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e0f7bdb-cc69-4ead-915f-f36bacd04672"",
                    ""path"": ""<Keyboard>/numpadMinus"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera ZoomOut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e57a903-dfe2-4199-aeab-ff72961f89dc"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera ZoomOut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Rebinding"",
            ""id"": ""0adb29ab-ba39-48a3-929b-ffc7286b81d4"",
            ""actions"": [],
            ""bindings"": []
        }
    ],
    ""controlSchemes"": []
}");
            // Gameplay
            m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
            m_Gameplay_CameraZoomIn = m_Gameplay.FindAction("Camera ZoomIn", throwIfNotFound: true);
            m_Gameplay_CameraZoomOut = m_Gameplay.FindAction("Camera ZoomOut", throwIfNotFound: true);
            // Rebinding
            m_Rebinding = asset.FindActionMap("Rebinding", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Gameplay
        private readonly InputActionMap m_Gameplay;
        private IGameplayActions m_GameplayActionsCallbackInterface;
        private readonly InputAction m_Gameplay_CameraZoomIn;
        private readonly InputAction m_Gameplay_CameraZoomOut;
        public struct GameplayActions
        {
            private @InputActions m_Wrapper;
            public GameplayActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @CameraZoomIn => m_Wrapper.m_Gameplay_CameraZoomIn;
            public InputAction @CameraZoomOut => m_Wrapper.m_Gameplay_CameraZoomOut;
            public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
            public void SetCallbacks(IGameplayActions instance)
            {
                if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
                {
                    @CameraZoomIn.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnCameraZoomIn;
                    @CameraZoomIn.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnCameraZoomIn;
                    @CameraZoomIn.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnCameraZoomIn;
                    @CameraZoomOut.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnCameraZoomOut;
                    @CameraZoomOut.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnCameraZoomOut;
                    @CameraZoomOut.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnCameraZoomOut;
                }
                m_Wrapper.m_GameplayActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @CameraZoomIn.started += instance.OnCameraZoomIn;
                    @CameraZoomIn.performed += instance.OnCameraZoomIn;
                    @CameraZoomIn.canceled += instance.OnCameraZoomIn;
                    @CameraZoomOut.started += instance.OnCameraZoomOut;
                    @CameraZoomOut.performed += instance.OnCameraZoomOut;
                    @CameraZoomOut.canceled += instance.OnCameraZoomOut;
                }
            }
        }
        public GameplayActions @Gameplay => new GameplayActions(this);

        // Rebinding
        private readonly InputActionMap m_Rebinding;
        private IRebindingActions m_RebindingActionsCallbackInterface;
        public struct RebindingActions
        {
            private @InputActions m_Wrapper;
            public RebindingActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputActionMap Get() { return m_Wrapper.m_Rebinding; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(RebindingActions set) { return set.Get(); }
            public void SetCallbacks(IRebindingActions instance)
            {
                if (m_Wrapper.m_RebindingActionsCallbackInterface != null)
                {
                }
                m_Wrapper.m_RebindingActionsCallbackInterface = instance;
                if (instance != null)
                {
                }
            }
        }
        public RebindingActions @Rebinding => new RebindingActions(this);
        public interface IGameplayActions
        {
            void OnCameraZoomIn(InputAction.CallbackContext context);
            void OnCameraZoomOut(InputAction.CallbackContext context);
        }
        public interface IRebindingActions
        {
        }
    }
}
